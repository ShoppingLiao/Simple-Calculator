{"version":3,"sources":["Components/App/Styled.js","Components/Calculator/Styled.js","Components/Calculator/index.js","Components/Calculator/Calculator.js","Components/App/App.js","Components/App/index.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","Header","header","Content","Row","ButtonStyle","BigButton","Button","BlueButton","GrayButton","Calculator","useState","number","setNumber","operator","setOperator","oldNumber","setOldNumber","handleNumClick","num","handleOperatorClick","key","Number","onClick","String","includes","App","src","width","height","frameborder","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e9e106ec.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  text-align: center;\n`;\n\nexport const Header = styled.header`\n  background-color: #fff;\n  height: 3rem;\n  line-height: 3rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: 1rem;\n  color: #666;\n`;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  /* 長寬比先用iphone 6 的16:9 */\n  @media (max-width: 1024px) {\n    width: 360px;\n    height: 640px;\n  }\n\n  width: 1024px;\n  height: 1820.45px;\n  margin: 20px auto;\n  background: linear-gradient(to bottom, #84baff 0%, #0b0e1c 100%);\n  text-align: center;\n`;\n\nexport const Content = styled.div`\n  text-align: right;\n  padding: 4rem 1rem 0.5rem;\n  font-size: 4rem;\n  color: #fff;\n  white-space: nowrap;\n`;\n\nexport const Row = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  margin: 0.5rem 0;\n`;\n\nconst ButtonStyle = `\n  width: 3.8rem;\n  height: 3.8rem;\n  line-height: 3.8rem;\n  font-size: 2rem;\n  text-align: center;\n  border-radius: 1.9rem;\n  cursor: pointer;\n  user-select: none;\n  `;\nexport const BigButton = styled.div`\n  color: #fff;\n  background: #333333;\n  &:active {\n    background: #1a1a1a;\n  }\n  ${ButtonStyle};\n  width: 8.2rem;\n`;\n\nexport const Button = styled.div`\n  color: #fff;\n  background: #333333;\n  &:active {\n    background: #1a1a1a;\n  }\n  ${ButtonStyle};\n`;\n\nexport const BlueButton = styled.div`\n  color: #fff;\n  background: #3091fd;\n  &:active {\n    background: #0377fc;\n  }\n  ${ButtonStyle};\n`;\n\nexport const GrayButton = styled.div`\n  color: #333;\n  background: #afafaf;\n  &:active {\n    background: #999999;\n  }\n  ${ButtonStyle};\n`;\n","import Calculator from \"./Calculator\";\n\nexport default Calculator;\n","import React, { useState } from 'react';\nimport {\n  Wrapper,\n  Content,\n  Row,\n  BigButton,\n  Button,\n  BlueButton,\n  GrayButton\n} from './Styled';\n\nexport default function Calculator() {\n  const [number, setNumber] = useState(0); // 顯示用的數字\n  const [operator, setOperator] = useState(); // 運算符號\n  const [oldNumber, setOldNumber] = useState(); // 計算時暫存的數字\n\n  function handleNumClick(num) {\n    if (number === 0) {\n      if (num === 0) {\n        return;\n      }\n      setNumber(`${num}`);\n    } else {\n      setNumber(`${number}${num}`);\n    }\n  }\n\n  function handleOperatorClick(key) {\n    // 第一次進入\n    if (!operator) {\n      // 把現在的數字存起來\n      setOldNumber(number);\n      setOperator(key);\n      setNumber(0);\n      return;\n    }\n\n    switch (key) {\n      case '+': {\n        setNumber(Number(oldNumber) + Number(number));\n        setOperator();\n        setOldNumber();\n        break;\n      }\n      case '-': {\n        setNumber(Number(oldNumber) - Number(number));\n        setOperator();\n        setOldNumber();\n        break;\n      }\n      case '=': {\n        if (operator === '+') {\n          setNumber(Number(oldNumber) + Number(number));\n          setOperator();\n          setOldNumber();\n        } else if (operator === '-') {\n          setNumber(Number(oldNumber) - Number(number));\n          setOperator();\n          setOldNumber();\n        }\n        break;\n      }\n\n      default:\n        return;\n    }\n  }\n\n  function handleClear() {\n    setNumber(0);\n    setOperator();\n    setOldNumber();\n  }\n\n  function handleDotClick() {\n    if (!number) {\n      setNumber('0.');\n      return;\n    }\n    if (String(number).includes('.')) {\n      return;\n    }\n\n    setNumber(`${number}.`);\n  }\n\n  return (\n    <Wrapper>\n      <Content>{number}</Content>\n      <Row>\n        <GrayButton onClick={() => handleClear()}>AC</GrayButton>\n        <GrayButton>+/-</GrayButton>\n        <GrayButton>%</GrayButton>\n        <BlueButton>÷</BlueButton>\n      </Row>\n      <Row>\n        <Button onClick={() => handleNumClick(7)}>7</Button>\n        <Button onClick={() => handleNumClick(8)}>8</Button>\n        <Button onClick={() => handleNumClick(9)}>9</Button>\n        <BlueButton>×</BlueButton>\n      </Row>\n      <Row>\n        <Button onClick={() => handleNumClick(4)}>4</Button>\n        <Button onClick={() => handleNumClick(5)}>5</Button>\n        <Button onClick={() => handleNumClick(6)}>6</Button>\n        <BlueButton onClick={() => handleOperatorClick('-')}>-</BlueButton>\n      </Row>\n      <Row>\n        <Button onClick={() => handleNumClick(1)}>1</Button>\n        <Button onClick={() => handleNumClick(2)}>2</Button>\n        <Button onClick={() => handleNumClick(3)}>3</Button>\n        <BlueButton onClick={() => handleOperatorClick('+')}>+</BlueButton>\n      </Row>\n      <Row>\n        <BigButton onClick={() => handleNumClick(0)}>0</BigButton>\n        <Button onClick={() => handleDotClick()}>.</Button>\n        <BlueButton onClick={() => handleOperatorClick('=')}>=</BlueButton>\n      </Row>\n    </Wrapper>\n  );\n}\n","import React from 'react';\nimport { Wrapper, Header } from './Styled';\nimport Calculator from '../Calculator';\n\nfunction App() {\n  return (\n    <Wrapper>\n      <Header>Shopping Liao's Simple Calculator</Header>\n      <Calculator />\n      <iframe\n        src=\"https://shoppingliao.github.io/Simple-Rating-App/?event_name=simple-calculator&user_email=simple-calculator@test.com&user_type=simple-calculator-test-type\"\n        width=\"100%\"\n        height=\"380px\"\n        frameborder=\"0\"\n      />\n    </Wrapper>\n  );\n}\n\nexport default App;\n","import App from \"./App\";\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./Components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}